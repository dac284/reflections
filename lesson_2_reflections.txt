What happens when you initialize a repository? Why do you need to do it?

Initializing a git repository sets up version control to start tracking commits, though it does not make any initial commits. You need to initialize to have the commit history trackable.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a separate entity from the working directory that only contains files that have been added. The working directory has all files in the directory. The value here is that you may only want to stage some files in a directory for a commit, or you may want to check your files before commiting and you might decide not to commit some changes and remove them from the staging area.

How can you use the staging area to make sure you have one commit per logical change?

You can use git diff to view the differences between files in the staging area and your last commit, which lets you see the exact changes you are about to commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful if multiple parties are working on the same files or if you want to explore adding a new feature without introducing bugs into the master branch. Anytime you want to preserve a production version, a branch is a good idea.

How do the diagrams help you visualize the branch structure?

The diagrams allow you to see the parent/child relations of each commit and which commits are on which branch. This will be important when merging and to make sure you don't get rid of changes accidentally by checking out a different branch before committing on the current branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The merged branches become one branch that tracks all the commit history of both previous branches. We represent it with two arrows back to parents because that merge commit has two parent commits and can track back to all the prior commits on both branchs.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The automatic merging is quick and especially good at recognizing lines added to or subtracted from the most recent common ancestor. Manual is better when lines have been changed by multiple parties and the authors need to pick one. If the branches were working on pretty different parts of the code, the auto will probably work well. If they were taking two approaches to fixing bugs in the same code, than a manual merge, or conflict resolution, will probably be necessary.

